                            | #prob1 
0x000: 30f00600000000000000 | irmovq  $6, %rax     # Move the value 5 to the RAX register (i)
0x00a: 2006                 | rrmovq  %rax, %rsi   #move the value into register so subq won't overwrite it
0x00c: 30f30600000000000000 | irmovq  $6, %rbx      # Move the value 6 to the RBX register (j)
0x016: 30f10200000000000000 | irmovq  $2, %rcx      # Move the value 2 to the RCX register
0x020: 30f20100000000000000 | irmovq  $1, %rdx      # Move the value 1 to the RDX register
                            | 
                            | 
0x02a: 6136                 | subq    %rbx, %rsi    # Subtract j from i
0x02c: 714a00000000000000   | jle     IF            # If i is less than j, jump to THEN
0x035: 30f00100000000000000 | irmovq  $1, %rax      # If i is greater than j, move the value 1 to i
0x03f: 6023                 | addq    %rdx, %rbx    # Adds one to j
0x041: 705500000000000000   | jmp     ENDIF
                            | 
0x04a:                      | IF:
0x04a: 6010                 |     addq    %rcx, %rax    # If i is less than j, add 2 to i
0x04c: 705500000000000000   |     jmp ENDIF
                            | 
0x055:                      | ENDIF:
0x055: 00                   |     halt
